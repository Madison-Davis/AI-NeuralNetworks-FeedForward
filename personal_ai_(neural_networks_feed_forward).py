# -*- coding: utf-8 -*-
"""Personal: AI (Neural Networks: Feed Forward).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lM_blUVtXeVluHIMxgVn1zA8AuKbh0Gm
"""

# Feed Forward Neural Network

# Imports
import tensorflow
from sklearn import preprocessing
from sklearn.preprocessing import LabelBinarizer
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.datasets import mnist
from tensorflow.keras import backend as K
import matplotlib.pyplot as plt
import numpy as np
import argparse
import csv

# Data
# URL: https://www.kaggle.com/datasets/shubhambathwal/flight-price-prediction
# Rows we want to use:
  # 1: airline company
  # 3: source city
  # 7: destination city
  # 8: flight class
  # 9: duration of flight
  # 10: days left until board
# X Lineup: airline company, source city, destination city, # stops, flight class
# Y Lineup: ticket price
dataFile = open("//content//drive//MyDrive//Coding//Personal Projects//1: Artificial Intelligence//Resources//AviationPricePrediction.csv")
dataFile = csv.reader(dataFile)
airlineCompanies = ['AirAsia','Air_India','GO_FIRST','Indigo','SpiceJet','Vistara']
stops = ['zero', 'one', 'two_or_more']
flightClass = ['Economy', 'Business']
sourceCity = ['Bangalore','Chennai','Delhi','Hyderabad','Kolkata','Mumbai']
destinationCity = ['Bangalore','Chennai','Delhi','Hyderabad','Kolkata','Mumbai']
header = True
X = []
Y = []

for row in dataFile:
  appendingList = []
  if header:
    header = False
    continue
  else:
    appendingList.append(airlineCompanies.index(row[1]))
    appendingList.append(sourceCity.index(row[3]))
    appendingList.append(destinationCity.index(row[7]))
    appendingList.append(stops.index(row[5]))
    appendingList.append(flightClass.index(row[8]))
    X.append(appendingList)
    Y.append(int(row[11]))

print(max(Y))
print(min(Y))

# Standardization
Y = np.array(Y).reshape(-1,1)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(Y)
Y = scaler.transform(Y)

# Train Test Split
XTrain, XTest, YTrain, YTest = train_test_split(X, Y, test_size = 0.2, random_state = 42)
XTrain = np.array(XTrain)
YTrain = np.array(YTrain)
XTest = np.array(XTest)
YTest = np.array(YTest)

# Network
model = Sequential()
model.add(Dense(5, input_dim = 5, activation = "relu"))
model.add(Dense(50, activation = "relu"))
model.add(tensorflow.keras.layers.Dropout(.5))
model.add(Dense(75, activation = "relu"))
model.add(tensorflow.keras.layers.Dropout(.5))
model.add(Dense(100, activation = "relu"))
model.add(Dense(125, activation = "relu"))
model.add(tensorflow.keras.layers.Dropout(.5))
model.add(Dense(75, activation = "relu"))
model.add(Dense(50, activation = "relu"))
model.add(tensorflow.keras.layers.Dropout(.5))
model.add(Dense(25, activation = "relu"))
model.add(Dense(1))
model.compile(loss = "mse", optimizer = "adam")
model.fit(XTrain, YTrain, validation_data = (XTest, YTest), epochs = 20, batch_size = 100)

# Prediction and Transformation Back to Dollar Value
# In this example, we look at the 5th prediction
prediction = model.predict(X[:10])
# print(X[5])
# print(Y[5])
# print(prediction[5])

Y = np.append(Y, prediction[5]).reshape(-1,1)
inversed = scaler.inverse_transform(Y)
print("Prediction: $", int(inversed[-1]))
print("Actual Value: $", int(inversed[5]))